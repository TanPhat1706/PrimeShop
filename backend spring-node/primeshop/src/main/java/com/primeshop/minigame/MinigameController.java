package com.primeshop.minigame;

import com.primeshop.voucher.Voucher;
import com.primeshop.voucher.VoucherService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.*;

@RestController
@RequestMapping("/api/minigame")
public class MinigameController {
    @Autowired
    private VoucherService voucherService;

    // Danh s√°ch game c·∫•u h√¨nh
    private static final List<GameInfo> GAME_LIST = List.of(
        new GameInfo("who_wants_to_be_millionaire", "Ai l√† tri·ªáu ph√∫", "Tr·∫£ l·ªùi ƒë√∫ng 5 c√¢u h·ªèi ƒë·ªÉ nh·∫≠n voucher!", "üí°"),
        new GameInfo("quiz", "Quiz nhanh", "Tr·∫£ l·ªùi nhanh 3 c√¢u h·ªèi, nh·∫≠n voucher h·∫•p d·∫´n!", "üìù")
        // C√≥ th·ªÉ m·ªü r·ªông th√™m game kh√°c
    );

    // C√¢u h·ªèi cho t·ª´ng gameId
    private static final Map<String, List<Question>> GAME_QUESTIONS = Map.of(
        "who_wants_to_be_millionaire", List.of(
            new Question("Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√† g√¨?", List.of("H√† N·ªôi", "H·∫£i Ph√≤ng", "ƒê√† N·∫µng", "TP.HCM"), 0),
            new Question("2 + 2 = ?", List.of("3", "4", "5", "6"), 1),
            new Question("M√†u c·ªù Vi·ªát Nam l√†?", List.of("ƒê·ªè", "Xanh", "V√†ng", "Tr·∫Øng"), 0),
            new Question("Ch·ªØ c√°i ƒë·∫ßu ti√™n trong b·∫£ng ch·ªØ c√°i?", List.of("A", "B", "C", "D"), 0),
            new Question("S√¥ng n√†o d√†i nh·∫•t Vi·ªát Nam?", List.of("S√¥ng H·ªìng", "S√¥ng Mekong", "S√¥ng ƒê√†", "S√¥ng ƒê·ªìng Nai"), 1)
        ),
        "quiz", List.of(
            new Question("Tr√°i ƒë·∫•t quay quanh g√¨?", List.of("M·∫∑t tr·ªùi", "M·∫∑t trƒÉng", "Sao H·ªèa", "Sao Kim"), 0),
            new Question("1 + 1 = ?", List.of("1", "2", "3", "4"), 1),
            new Question("M√†u l√° c√¢y?", List.of("Xanh", "ƒê·ªè", "V√†ng", "T√≠m"), 0)
        )
    );

    @GetMapping("/list")
    public ResponseEntity<?> getGameList() {
        List<Map<String, Object>> games = new ArrayList<>();
        for (GameInfo g : GAME_LIST) {
            games.add(Map.of(
                "gameId", g.getGameId(),
                "name", g.getName(),
                "description", g.getDescription(),
                "icon", g.getIcon()
            ));
        }
        return ResponseEntity.ok(Map.of("games", games));
    }

    @GetMapping("/questions")
    public ResponseEntity<?> getQuestions(@RequestParam String gameId) {
        List<Question> questions = GAME_QUESTIONS.get(gameId);
        if (questions == null) {
            return ResponseEntity.badRequest().body(Map.of("error", "Game kh√¥ng t·ªìn t·∫°i!"));
        }
        List<Map<String, Object>> qList = new ArrayList<>();
        for (Question q : questions) {
            qList.add(Map.of(
                "question", q.getQuestion(),
                "options", q.getOptions()
            ));
        }
        return ResponseEntity.ok(Map.of("questions", qList));
    }

    @PostMapping("/play")
    public ResponseEntity<?> playMinigame(@RequestBody MinigameRequest request, @RequestParam String gameId) {
        List<Question> questions = GAME_QUESTIONS.get(gameId);
        if (questions == null) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", "Game kh√¥ng t·ªìn t·∫°i!"));
        }
        if (request.getAnswers() == null || request.getAnswers().size() != questions.size()) {
            return ResponseEntity.badRequest().body(Map.of("success", false, "message", "S·ªë l∆∞·ª£ng ƒë√°p √°n kh√¥ng h·ª£p l·ªá!"));
        }
        boolean allCorrect = true;
        for (int i = 0; i < questions.size(); i++) {
            if (!Objects.equals(request.getAnswers().get(i), questions.get(i).getCorrectIndex())) {
                allCorrect = false;
                break;
            }
        }
        if (!allCorrect) {
            return ResponseEntity.ok(Map.of("success", false, "message", "B·∫°n ch∆∞a tr·∫£ l·ªùi ƒë√∫ng h·∫øt!"));
        }
        Voucher voucher = voucherService.createMinigameVoucherForUser(request.getUserId());
        return ResponseEntity.ok(Map.of(
            "success", true,
            "voucher", voucher
        ));
    }

    // DTOs
    public static class MinigameRequest {
        private List<Integer> answers;
        private Long userId;
        public List<Integer> getAnswers() { return answers; }
        public void setAnswers(List<Integer> answers) { this.answers = answers; }
        public Long getUserId() { return userId; }
        public void setUserId(Long userId) { this.userId = userId; }
    }
    public static class Question {
        private String question;
        private List<String> options;
        private int correctIndex;
        public Question(String question, List<String> options, int correctIndex) {
            this.question = question;
            this.options = options;
            this.correctIndex = correctIndex;
        }
        public String getQuestion() { return question; }
        public List<String> getOptions() { return options; }
        public int getCorrectIndex() { return correctIndex; }
    }
    public static class GameInfo {
        private String gameId;
        private String name;
        private String description;
        private String icon;
        public GameInfo(String gameId, String name, String description, String icon) {
            this.gameId = gameId;
            this.name = name;
            this.description = description;
            this.icon = icon;
        }
        public String getGameId() { return gameId; }
        public String getName() { return name; }
        public String getDescription() { return description; }
        public String getIcon() { return icon; }
    }
} 